#!/usr/bin/env bash

export C_INCLUDE_PATH=/usr/include/x86_64-linux-gnu
export PATH="$HOME/.local/bin:/usr/include/x86_64-linux-gnu:$PATH"
[ -f ${CARGO_ENV:="$HOME/.cargo/env"} ] && . "$CARGO_ENV"

export ROOT_DIR=$(git rev-parse --show-toplevel 2>/dev/null || echo "$PWD")
! test "$VIRTUAL_ENV" && [ -d "$ROOT_DIR/.venv" ] && VIRTUAL_ENV="$ROOT_DIR/.venv"

test "$VIRTUAL_ENV" && {
    : Clean up the old venv
    [ "$VIRTUAL_ENV" != "$PWD"* ] && {
        OLD_VENV_ESCAPED="${VIRTUAL_ENV///}"
        [ -f $VIRTUAL_ENV/*/activate ] && . $VIRTUAL_ENV/*/activate
        test $(which deactivate 2>/dev/null) && deactivate
        export PATH=$(echo "$PATH" | sed -e "s/:${OLD_VENV}//")
    }
    : Activate the actual venv
    [ -d "$VIRTUAL_ENV/bin" ] && . "$VIRTUAL_ENV/bin/activate"
    [ -d "$VIRTUAL_ENV/Scripts" ] && . "$VIRTUAL_ENV/Scripts/activate"
}

[ -f "$PWD/python" ] && {
    export PATH="$PWD:$PATH"
}

# Printbox
export PATH="$PATH:$HOME/.local/bin-eks"
export KUBECONFIG=$HOME/.kube/eks.config
# Printbox end

# pnpm
export PNPM_HOME="/home/bswck/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# fnm
FNM_PATH="/home/bswck/.local/share/fnm"
if [ -d "$FNM_PATH" ]; then
  export PATH="$FNM_PATH:$PATH"
  eval "`fnm env`"
fi
# fnm end

# .AppImage files
APPS_PATH="/home/bswck/Apps"
if [ -d "$APPS_PATH" ]; then
  export PATH="$APPS_PATH:$PATH"
fi
# .AppImage files end
