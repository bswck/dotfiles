#!/usr/bin/env bash

export PYTHONSTARTUP="$HOME/.pythonrc.py"
export C_INCLUDE_PATH=/usr/include/x86_64-linux-gnu
export PATH="$HOME/.local/bin:/usr/include/x86_64-linux-gnu:$PATH"

[ -f ${CARGO_ENV:="$HOME/.cargo/env"} ] && . "$CARGO_ENV"
export PNPM_HOME="$HOME/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
APPS_PATH="$HOME/Apps"
if [ -d "$APPS_PATH" ]; then
  export PATH="$APPS_PATH:$PATH"
fi

export ROOT_DIR=$(git rev-parse --show-toplevel 2>/dev/null || echo "$PWD")
! test "$VIRTUAL_ENV" && [ -d "$ROOT_DIR/.venv" ] && VIRTUAL_ENV="$ROOT_DIR/.venv"
[ -f "$PWD/python" ] && {
    export PATH="$PWD:$PATH"
}

[ -n "$VIRTUAL_ENV" ] && {
    : Clean up the old venv
    [ "$VIRTUAL_ENV" != "$PWD/.venv" ] && {
        OLD_VENV_ESCAPED="${VIRTUAL_ENV///}"
        [ -f $VIRTUAL_ENV/*/activate ] && . $VIRTUAL_ENV/*/activate
        test "$(which deactivate 2>/dev/null)" && deactivate
        unset VIRTUAL_ENV
        export PATH=$(echo "$PATH" | sed -e "s/:${OLD_VENV}//")
    }
    : Activate the actual venv
    [ -d ".venv" ] && {
        VIRTUAL_ENV=".venv"
        [ -d "$VIRTUAL_ENV/bin" ] && . "$VIRTUAL_ENV/bin/activate"
        [ -d "$VIRTUAL_ENV/Scripts" ] && . "$VIRTUAL_ENV/Scripts/activate"
    }
}

if [ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

if which starship >/dev/null 2>&1; then
    eval "$(starship init bash)"
    starship_precmd
fi
